#include<iostream>

class Node {
    private:
    public:
    int value{};
    Node* left{};
    Node* right{};
    Node(int val) : value(val), left(nullptr), right(nullptr) {}
};

class BinarySearchTree{
    private:
    public:
    Node* root;
    int height;
    BinarySearchTree() {
        root = nullptr;
    }
    ~BinarySearchTree() {
        root = nullptr;
    }
    bool insert(int value) {
        Node* newNode = new Node(value);
        if(root == nullptr) {
            root = newNode;
            return true;
        }
        Node* temp = root;
        while(true) {
            if(newNode->value == temp->value) return false;
            if(newNode->value < temp->value) {
                if(newNode->left == nullptr) {
                    temp->left = newNode;
                    return true;
                }
                temp = temp->left;
            }
            else {
                 if(newNode->right == nullptr) {
                    temp->right = newNode;
                    return true;
                }
                temp = temp->right;
            }
        }
    }
};

int main() {
    BinarySearchTree* bst = new BinarySearchTree();
    bst->insert(5);
    bst->insert(4);
    bst->insert(9);
    bst->insert(13);
    
    std::cout<<"root value : "<<bst->root->value<<std::endl;
    std::cout<<"root left value : "<<bst->root->left->value<<std::endl;
    return 0;
}
